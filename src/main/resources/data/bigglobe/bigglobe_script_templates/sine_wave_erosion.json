{
	"script": [
		"unless (maxWavelength > minWavelength: return(0.0L))",
		"double*(",
			"result       = 0.0L",
			"theta        = seed.nextDouble(tau)",
			"unitX        = cos(theta)",
			"unitZ        = sin(theta)",
			"goldenCos    = cos(goldenAngle)",
			"goldenSin    = sin(goldenAngle)",
			"decay        = 2.0L ^ (-1.0L / 64.0L)",
		")",
		"minWavelength /= tau",
		"maxWavelength /= tau",
		"for (double wavelength = maxWavelength, wavelength >= minWavelength, wavelength *= decay:",
			"double*(",
				"phase             = (seed := seed.newSeed()).nextDouble(tau)",
				"projection        = (unitX * x + unitZ * z) + phase",
				"adjustedAmplitude = ((unitX * -dz + unitZ * dx) / (sqrt(dx ^ 2 + dz ^ 2) + dampening)) ^ 2",
				"addedValue        = approxSin(projection / wavelength) * adjustedAmplitude * wavelength",
				"addedDerivative   = approxCos(projection / wavelength) * adjustedAmplitude",
				"nextUnitX         = unitX * goldenCos + unitZ * -goldenSin",
				"nextUnitZ         = unitX * goldenSin + unitZ *  goldenCos",
			")",
			"result += addedValue",
			"dx     += addedDerivative * unitX",
			"dz     += addedDerivative * unitZ",
			"unitX   = nextUnitX",
			"unitZ   = nextUnitZ",
		")",
		"return(result * amplitude)"
	],
	"includes": [
		"bigglobe:include/approx_trig"
	],
	"inputs": [
		{ "name": "dx", "type": "double" },
		{ "name": "dz", "type": "double" },
		{ "name": "minWavelength", "type": "double" },
		{ "name": "maxWavelength", "type": "double" },
		{ "name": "seed", "type": "long" },
		{ "name": "dampening", "type": "double", "default": "4.0L" },
		{ "name": "amplitude", "type": "double", "default": "1.0L" }
	]
}